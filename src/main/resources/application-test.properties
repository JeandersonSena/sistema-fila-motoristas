# Configurações SOMENTE para o ambiente de teste

# Configura o H2 em memória para os testes
spring.datasource.url=jdbc:h2:mem:testdb;DB_CLOSE_DELAY=-1;DB_CLOSE_ON_EXIT=FALSE
spring.datasource.driverClassName=org.h2.Driver
spring.datasource.username=sa
spring.datasource.password=password

# Dialeto do Hibernate para H2
spring.jpa.database-platform=org.hibernate.dialect.H2Dialect

# Para testes, 'create-drop' é útil: cria o schema ao iniciar o teste, dropa ao finalizar.
# Garante um banco limpo para cada classe de teste (ou contexto).
spring.jpa.hibernate.ddl-auto=create-drop

# Desabilitar Flyway para os testes - deixamos o ddl-auto criar/dropar o schema H2.
# Senão precisaríamos de scripts de migração específicos para H2.
spring.flyway.enabled=false

# Manter níveis de log para testes (pode ajustar se precisar de menos ruído)
logging.level.root=INFO
logging.level.com.suaempresa.driverqueue=DEBUG
logging.level.org.springframework.web=INFO
logging.level.org.hibernate=WARN
# logging.level.org.hibernate.SQL=DEBUG # Descomente se precisar ver SQL nos testes

# Configs Twilio (podem ser fakes ou vazias, se mockarmos o serviço nos testes)
# Se não mockarmos e o TwilioService tentar inicializar, precisa de valores válidos (mesmo que fakes)
# Vamos mockar TwilioService, então podemos deixar em branco ou fakes.
twilio.account-sid=AC_TEST_SID_12345678901234567890
twilio.auth-token=TEST_AUTH_TOKEN_12345678901234
twilio.phone-number=+15005550006 # Número mágico de teste do Twilio (não envia SMS)